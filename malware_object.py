class Malware:

    def __init__(self, name):
        self.name = name
        self.pid_list = []
        self.instruction_executed = {}
        self.starting_instruction = {}
        self.active_pid = {}
        self.spawned_processes = {}
        self.terminated_processes = {}

    def add_pid(self, pid):
        if pid in self.pid_list:
            print 'ERROR add_pid pid already in the list'
            return -1
        else:
            self.pid_list.append(pid)
            self.instruction_executed[pid] = 0
            self.starting_instruction[pid] = 0
            self.active_pid[pid] = True
            self.spawned_processes[pid] = []
            self.terminated_processes[pid] = []
            return 1

    def get_active_pid(self):
        for pid, active in self.active_pid.iteritems():
            if active:
                return pid
        print 'ERROR get_active_pid active pid not found'
        return -1

    def set_active_pid(self, pid):
        if pid not in self.active_pid:
            print 'ERROR set_active_pid pid not found'
            return -1
        self.active_pid[pid] = True

    def deactivate_pid(self, pid):
        if pid not in self.active_pid:
            print 'ERROR deactivate_pid pid not found'
            return -1
        self.active_pid[pid] = False

    def is_pid_active(self, pid):
        if pid not in self.active_pid:
            print 'ERROR is_pid_active pid not found'
            return -1
        return self.active_pid[pid]

    def get_name(self):
        return self.name

    def get_pid_list(self):
        return self.pid_list

    def get_instruction_executed(self, pid):
        if pid not in self.instruction_executed:
            print "ERROR get_instruction_executed pid not found"
            return -1
        return self.instruction_executed[pid]

    def get_starting_instruction(self, pid):
        if pid not in self.starting_instruction:
            print "ERROR get_starting_instruction pid not found"
            return -1
        return self.starting_instruction[pid]

    def update_starting_instruction(self, pid, starting_instruction):
        if pid not in self.starting_instruction:
            print "ERROR update_starting_instruction pid not found "
            return -1
        self.starting_instruction[pid] = starting_instruction
        return 1

    def add_instruction_executed(self, pid, instruction_executed):
        if pid not in self.instruction_executed:
            print "ERROR add_instruction_executed pid not found "
            return -1
        self.instruction_executed[pid] += instruction_executed
        return 1

    def add_spawned_process(self, pid, new_process_id, new_process_name):
        if pid not in self.spawned_processes:
            print 'ERROR add_spawned_process pid not found'
            return -1
        self.spawned_processes[pid].append((new_process_id, new_process_name))
        return 1

    def get_spawned_processes(self, pid):
        if pid not in self.spawned_processes:
            print 'ERROR get_spawned_processes pid not found'
            return -1
        return self.spawned_processes[pid]

    def add_terminated_process(self, pid, terminated_process_id, terminated_process_name):
        if pid not in self.terminated_processes:
            print 'ERROR add_terminated_process pid not found'
            return -1
        self.terminated_processes[pid].append((terminated_process_id, terminated_process_name))
        return 1

    def get_terminated_processes(self, pid):
        if pid not in self.terminated_processes:
            print 'ERROR get_terminated_processes pid not found'
            return -1
        return self.terminated_processes[pid]

    def __str__(self):
        result = '--- ' + self.name + ' --- \n'
        for i in self.pid_list:
            result += 'pid: ' + str(i) + '\t last starting instruction: ' + \
                      str(self.get_starting_instruction(i)) + '\t instruction executed: ' + \
                      str(self.get_instruction_executed(i)) + '\n'
        return result

    __repr__ = __str__
