class Malware:

    def __init__(self, name, pid):
        self.pid_list = []
        self.pid_list.append(pid)
        self.name = name
        self.instruction_executed = []
        self.starting_instruction = []

    def get_name(self):
        return self.name

    def get_pid(self, position):
        if position > len(self.pid_list):
            return -1
        return self.pid_list[position]

    def get_instruction_executed(self, position):
        if position > len(self.instruction_executed):
            print "ERROR get_instruction_executed position value too high"
            return -1
        if position == len(self.instruction_executed):
            self.instruction_executed.append(0)
        return self.instruction_executed[position]

    def get_starting_instruction(self, position):
        if position > len(self.starting_instruction):
            print "ERROR get_starting_instruction position value too high"
            return -1
        if position == len(self.instruction_executed):
            self.starting_instruction.append(0)
        return self.starting_instruction[position]

    def add_pid(self, pid):
        if pid in self.pid_list:
            return -1
        else:
            self.pid_list.append(pid)
            return 1

    def set_name(self, name):
        if self.name == '':
            self.name = name
            return 1
        else:
            return -1

    def get_pid_position(self, pid):
        if pid not in self.pid_list:
            return -1
        else:
            return self.pid_list.index(pid)

    def update_starting_instruction(self, position, starting_instruction):
        if position > len(self.starting_instruction):
            print "ERROR add_starting_instruction position value too high"
            return -1
        if position == 0 or position == len(self.starting_instruction):
            self.starting_instruction.append(starting_instruction)
        else:
            self.starting_instruction[position] = starting_instruction
        return 1

    def add_instruction_executed(self, position, instruction_executed):
        if position > len(self.instruction_executed):
            print "ERROR add_instruction_executed position value too high"
            return -1
        if position == 0 or position == len(self.instruction_executed):
            self.instruction_executed.append(instruction_executed)
        else:
            self.instruction_executed[position] += instruction_executed
        return 1

    def __str__(self):
        result = self.name + ' --- \n'
        for i in range(len(self.pid_list)):
            result += str(self.pid_list[i]) + ' - ' + str(self.get_starting_instruction(i)) + ' - ' \
                      + str(self.get_instruction_executed(i)) + '\n'
        return result

    __repr__ = __str__
